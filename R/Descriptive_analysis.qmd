---
title: "Descriptive Analysis"
subtitle: "Indoor dust bacterial and fungal microbiota composition and allergic diseases: a scoping review"
author: 
  - "Javier Mancilla Galindo, MSc student"
  - "Supervisors: Inge Wouters and Alex Bossers"
  - "Examiner: Lidwien Smit"
date: today
execute: 
  echo: false
  warning: false
toc: true
format:
  pdf:
    documentclass: scrartcl
  docx:
    highlight-style: github
bibliography: ../docs/manuscript/references-dust-microbiome-review.bib
csl: ../docs/manuscript/environment-international.csl
editor: source
---

\pagebreak

# Packages and session information

```{r}
#| echo: true 
if (!require("pacman", quietly = TRUE)) {
  install.packages("pacman")
}

pacman::p_load(
  tidyverse,    # Used for basic data handling and visualization.
  ggmosaic,     # Used to create mosaic plots.   
  RColorBrewer, # Color palettes for data visualization. 
  maps,         # Retrieve map data to plot world map. 
  gridExtra,    # Arrange grobs in a plot. 
  gt,           # Print and save html tables.
  report        # Used to generate package citations in markdown format. 
)

```

```{r}
# Credits chunk of code: Alex Bossers, Utrecht University

psfolder <- "../data/processed"
figfolder <- "../results/output_figures"
tabfolder <- "../results/output_tables"
dir.create(psfolder, showWarnings = FALSE)
dir.create(figfolder, showWarnings = FALSE)
dir.create(tabfolder, showWarnings = FALSE)

session <- sessionInfo()
# remove clutter
session$BLAS <- NULL
session$LAPACK <- NULL
session$loadedOnly <- NULL

# write log file
writeLines(
  capture.output(print(session, locale = FALSE)),
  paste0("sessions/",lubridate::today(), "_session_descriptive_analysis.txt")
)

session
```

\pagebreak

# Load data   

```{r}
# Load data 
load(paste0(psfolder,"/Data_Dust_Microbiome_Review.RData"))

data <- Data_Dust_Microbiome_Review@data
countries <- Data_Dust_Microbiome_Review@countries
collectors <- Data_Dust_Microbiome_Review@collectors
buildings <- Data_Dust_Microbiome_Review@buildings
environmental_determinants <- Data_Dust_Microbiome_Review@environmental_determinants

str(Data_Dust_Microbiome_Review, max.level = 2)
```

```{r}
#| include: false
rm(Data_Dust_Microbiome_Review)
```

```{r}
#| include: false
total_studies <- count(data)$n
```


# Descriptive analysis of variables collected 
## Year of publication 

> The range of year of publication was `r data %>% summarise(min=min(Year))` to `r data %>% summarise(max=max(Year))`. 

```{r}
table <- data %>% 
  group_by(Year) %>% 
  summarise(n=n()) %>% 
  mutate(Percentage = round((n/sum(n)*100), digits=1))
```


The following barplot saved as **Figure_years_publication.jpeg** shows the absolute frequency of original research articles published per year. 

```{r}
barplot(
  table$n, 
  xlab = "Year", ylab = "Absolute Frequency", 
  main = "Absolute frequency of studies by year",
  names.arg = table$Year, 
  ylim = c(0,25), xlim = c(0,20), cex.names = 0.9, las = 2,
  col="darkslategray4"
  )
```

```{r}
#| include: false
png(filename=paste0(figfolder,"/Figure_years_publication.png"),width=8, height=5, units="in", res=600)
barplot(
  table$n, 
  xlab = "Year", ylab = "Absolute Frequency", 
  main = "Absolute frequency of studies by year",
  names.arg = table$Year, 
  ylim = c(0,25), xlim = c(0,20), cex.names = 0.9, las = 2,
  col="darkslategray4"
  )
dev.off()
```

```{r}
rm(table)
```

\pagebreak
## Study Design

```{r}
design <- data %>% 
  group_by(Study_Design) %>% 
  summarise(n=n()) %>% 
  mutate(Percentage = round((n/sum(n)*100), digits=1))

design$design_summary <- paste0(design$Study_Design, ", n=", design$n," (", design$Percentage, "%)")

design %>% gt() %>% cols_hide(design_summary)
```

```{r}
design %>% 
  ggplot() +
  geom_bar(aes(x = Study_Design, y = n, fill = Study_Design), stat="identity") + 
  scale_fill_manual(
    values=c("cadetblue2","blueviolet","darkorange1","firebrick","gold")
  ) +
  ylim(0,100) +
  labs(
    y = "Absolute Frequency",
    x = "",
    title = "Epidemiological study design"
  ) +
  theme_bw() + 
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2)),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5)
  )

ggsave("Figure_Study_design.png",
       path = figfolder,
       width = 6, height = 5, units = "in", dpi = 600
)
```

> The studies included in the review used the following study designs: `r unique(design$design_summary)`.

```{r}
#| include: false

# Figure in base r format showing percentage instead of absolute frequency. 
png(filename=paste0(figfolder,"/Figure_Study_Designs_alternative.png"),width=7, height=6, units="in", res=600)
barplot(
  Percentage ~ Study_Design, data = design, 
  xlab="Study Design", ylab="Percentage (%)", 
  main="Epidemiological study design", 
  ylim = c(0,60), 
  col = c("cadetblue2","blueviolet","darkorange1","firebrick","gold")
  )
dev.off()
```

```{r}
rm(design)
```

\pagebreak
## Type of building  
```{r}
count_buildings <- buildings %>% 
  group_by(Building) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round((n/total_studies*100), digits=1)) %>% 
  arrange(desc(n)) 

count_buildings %>% 
  gt()
```

Barplot top 10 types of building:  
```{r}
head(count_buildings, 10) %>%
  mutate(Building = factor(Building, levels = Building)) %>% 
  ggplot() +
  geom_bar(aes(x = Building, y = n, fill = Building), stat="identity") + 
  scale_fill_brewer(palette="Set3") +
  labs(
    y = "Absolute Frequency",
    x = ""
  ) +
  coord_flip() +
  theme_bw() + 
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2)),
        legend.position = "none"
  )

ggsave("Figure_buildings.png",
       path = figfolder,
       width = 6, height = 4, units = "in", dpi = 600
)
```

```{r}
#| include: false
rm(count_buildings)
```

\pagebreak
## Countries

Some of the studies were conducted in multiple countries or in the international space station: 

```{r}
data %>% 
  group_by(Multiple_Countries) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/total_studies*100,1) ) %>% 
  arrange(desc(n)) %>% 
  gt
```

After excluding those studies conducted in the international space station, these are the frequencies and percentages of studies per country.

```{r}
countries_counts <- 
  countries %>% 
  group_by(Country) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/(total_studies-5)*100,2) )

countries_counts %>% arrange(desc(n)) %>% gt
``` 


\pagebreak
### Map 
I will use the world map data from the maps package `map_data("world")` to join with the `countries` dataset. 

```{r}
#| echo: true
#| output: false
source("scripts/world_map.R")
```

```{r}
#| out-width: 100%
plot_map
```

### Region 
```{r}
table_regions %>% gt
```

```{r}
#| include: false
rm(mapdata, mapfig, plot_map, table_regions, Figure_Map_Regions, countries_counts)
```


\pagebreak
### Income group  
```{r}
countries %>% 
  group_by(Income) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/(total_studies-5)*100,1) ) %>% 
  arrange(desc(n)) %>% 
  gt
```

## Topics 

### Allergy 
```{r}
data %>%
  group_by(Allergy) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/total_studies*100,1) ) %>% 
  gt
```

### Environmental determinants  
```{r}
data %>%
  group_by(Environmental_determinants) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/total_studies*100,1) ) %>% 
  gt
```

\pagebreak
## Dust collectors 

```{r}
collectors %>% 
  group_by(Dust_collector) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round((n/total_studies*100), digits=1)) %>% 
  arrange(desc(n)) %>% 
  gt()
```

```{r}
collectors <- collectors %>% 
  mutate(Dust_collector = case_when(
    Dust_collector == "active-sampler" ~ "active",
    TRUE ~ Dust_collector
  ))
attach(collectors)
table <- prop.table(table(Dust_collector))*100
detach(collectors)
```

```{r}
barplot(
  table,
  xlab="Type of collector", 
  ylab="Absolute Frequency", 
  main="Type of dust collectors", 
  ylim = c(0,80), 
  col = brewer.pal(7, name = "Accent")
  )
```

```{r}
#| include: false

# Figure showing percentage instead of absolute frequency. 
png(filename=paste0(figfolder,"/Figure_Collectors.png"),width=7, height=6, units="in", res=600)
barplot(
  table, 
  xlab="Type of collector", ylab="Percentage (%)", 
  main="Frequency of dust collectors", 
  ylim = c(0,60), col = brewer.pal(7, name = "Accent")
  )
dev.off()
```

\pagebreak
## Descriptive vs causal
```{r}
data %>%
  group_by(Causality) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/total_studies*100,1) ) %>% 
  gt
```

## Causal statements 

```{r}
data %>%
  group_by(Causal_statements) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/total_studies*100,1) ) %>% 
  gt
```

## Confounding

```{r}
data %>%
  group_by(Variable_selection) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/total_studies*100,1) ) %>% 
  gt
```

## Variable selection 
```{r}
data %>% 
  group_by(Variable_selection) %>% 
  summarize(n = n()) %>% 
  ggplot() +
  geom_bar(aes(x = Variable_selection, y = n, fill = Variable_selection), stat="identity") + 
  scale_fill_brewer(palette="Greens") +
  labs(
    y = "Absolute Frequency",
    x = ""
  ) +
  coord_flip() +
  theme_bw() + 
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"),
        axis.text.x = element_text(size=rel(1.2)), 
        axis.text.y = element_text(size=rel(1.2)),
        legend.position = "none"
  )


ggsave("Figure_Variable_selection.png",
       path = figfolder,
       width = 6, height = 4, units = "in", dpi = 600
)
```

\pagebreak
## Environmental determinants

```{r}
table_environmental_determinants <- environmental_determinants %>%
  group_by(Environmental_category) %>% 
  summarize(n = n()) %>% 
  mutate(Percentage = round(n/total_studies*100,1) ) %>% 
  arrange(desc(n)) %>% 
  gt

table_environmental_determinants 
```

```{r}
#| include: false
gtsave(
  table_environmental_determinants,
  filename = "html/table_environmental_determinants.html",
  path = tabfolder
)
```

\pagebreak
# Table of characteristics of individual studies 

The table of characteristics of studies with their citations will be saved as *Table_study_characteristics.csv*.  
```{r}
#| echo: true
source("scripts/studies_included_table.R")
```

\pagebreak
# Package references

```{r}
#| include: false
report::cite_packages(session)
```

  - Becker OScbRA, Minka ARWRvbRBEbTP, Deckmyn. A (2023). _maps: Draw Geographical Maps_. R package version 3.4.2, <https://CRAN.R-project.org/package=maps>.
  - Grolemund G, Wickham H (2011). “Dates and Times Made Easy with lubridate.” _Journal of Statistical Software_, *40*(3), 1-25. <https://www.jstatsoft.org/v40/i03/>.
  - Iannone R, Cheng J, Schloerke B, Hughes E, Lauer A, Seo J (2024). _gt: Easily Create Presentation-Ready Display Tables_. R package version 0.10.1, <https://CRAN.R-project.org/package=gt>.
  - Jeppson H, Hofmann H, Cook D (2021). _ggmosaic: Mosaic Plots in the 'ggplot2' Framework_. R package version 0.3.3, <https://CRAN.R-project.org/package=ggmosaic>.
  - Makowski D, Lüdecke D, Patil I, Thériault R, Ben-Shachar M, Wiernik B (2023). “Automated Results Reporting as a Practical Tool to Improve Reproducibility and Methodological Best Practices Adoption.” _CRAN_. <https://easystats.github.io/report/>.
  - Müller K, Wickham H (2023). _tibble: Simple Data Frames_. R package version 3.2.1, <https://CRAN.R-project.org/package=tibble>.
  - Neuwirth E (2022). _RColorBrewer: ColorBrewer Palettes_. R package version 1.1-3, <https://CRAN.R-project.org/package=RColorBrewer>.
  - R Core Team (2024). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>.
  - Rinker TW, Kurkiewicz D (2018). _pacman: Package Management for R_. version 0.5.0, <http://github.com/trinker/pacman>.
  - Wickham H (2016). _ggplot2: Elegant Graphics for Data Analysis_. Springer-Verlag New York. ISBN 978-3-319-24277-4, <https://ggplot2.tidyverse.org>.
  - Wickham H (2023). _forcats: Tools for Working with Categorical Variables (Factors)_. R package version 1.0.0, <https://CRAN.R-project.org/package=forcats>.
  - Wickham H (2023). _stringr: Simple, Consistent Wrappers for Common String Operations_. R package version 1.5.1, <https://CRAN.R-project.org/package=stringr>.
  - Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” _Journal of Open Source Software_, *4*(43), 1686. doi:10.21105/joss.01686 <https://doi.org/10.21105/joss.01686>.
  - Wickham H, François R, Henry L, Müller K, Vaughan D (2023). _dplyr: A Grammar of Data Manipulation_. R package version 1.1.4, <https://CRAN.R-project.org/package=dplyr>.
  - Wickham H, Henry L (2023). _purrr: Functional Programming Tools_. R package version 1.0.2, <https://CRAN.R-project.org/package=purrr>.
  - Wickham H, Hester J, Bryan J (2024). _readr: Read Rectangular Text Data_. R package version 2.1.5, <https://CRAN.R-project.org/package=readr>.
  - Wickham H, Vaughan D, Girlich M (2024). _tidyr: Tidy Messy Data_. R package version 1.3.1, <https://CRAN.R-project.org/package=tidyr>.

```{r}
#| include: false  
# Run this chunk if you wish to clear your environment and unload packages.

rm(list = ls())
pacman::p_unload(negate = TRUE)

```

# References studies